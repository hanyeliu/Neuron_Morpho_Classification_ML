#! /bin/bash

#Script running run.py for a given number of iteration and retrieving time each time for supervised and unsupervised
# Between each iteration, the environment is reset
# The time is then saved in output/results.csv with the avreage of time
# Output of each iteration is also saved in output/output.mode.architecture.iteration

# Usage $0 numberOfRun architecture
# Example: $0 10 ppc64le
# If usage is not respected, an error message is displayed

#Made by Guillaume Villette (guillaume.villette@fr.ibm.com)


#Check the format usage is respected
if [ "$#" -ne 2 ]; then
	echo "Illegal number of parameters"
	echo "Usage: $0 numberOfRun architecture"
	echo "Example: $0 10 ppc64le"
	exit 1
fi

#Declare some variables

#Total number of iteration
numberOfRun=$1
#The kind of architecture (eg ppc64le, x86, ...)
architecture=$2
#Directory where results will be saved
outputDirectory=output
#Delimiter for csv file
csvDelimiter=";"
#File where time will be saved (the csv file)
resultsFile="$outputDirectory/results.csv"
#Directory where data will be found
workingDirectory="/tmp"

#Functions

#run: Launch the python script run.py for a given number of iteration
#     and retrieve the execution time with bash command time
#     Between each iteration, environment is cleaned by deleting data
#
# Argument:
# 	- $1: The mode of execution: supervised or unsupervised
#		If the value is other than one of the above, it will be considered as unsupervised
#
# Output:
#	- Output of run.py will be saved in directory $outputDirectory on a file with name:
#		output.$1.$architecture.iteration
#
# Pseudo-code:
# 	Choose the configuration file
#	For each iteration
#		clean environment
#		Launch script with command time (eg time python run.py) and redirect output
run () {
	#Choose configuration file
	mode="$1"
	echo "-----mode $mode-----"
	if [ "$mode" == "supervised" ]; then
		configFile=configurationSupervised.py
	else
		configFile=configurationUnsupervised.py
	fi
	echo "Copy configuration file into configuration.py"
	cp $configFile configuration.py

	#Start iteration
	for indexRun in $(seq $numberOfRun); do
		echo "run $indexRun/$numberOfRun"
		#Clean environment
		echo "Clean environment"
		rm -rf $workingDirectory/Data_Analysis_1/
		rm -rf $workingDirectory/Extracted_Features/
		#Run script
		echo "Launch script"
		{ time -p python run.py 1>$outputDirectory/output.$mode.$architecture.$indexRun 2>&1; } 2> $outputDirectory/time.$mode.$architecture.$indexRun
	done
}

#retriveTime: Read real time file generated by run 
#
# Arguments:
#	- $1 file to analyse (complete path). It is generated trhough command time
#		The file is on the format:
#			blank line
#			real time
#			Whatever
#	If this format is not respected or does not exist, behaviour is not defined
#
# Output:
#	- Variable timeValue is created in this function and can be reused after.
#		it contains the real time on the format x.y
#
# Pseudo-code:
#	Read the file until line 2
#	Parse it to find the number
retriveTime () {
	timeFile="$1"
	indexLine=0
	while IFS='' read -r line || [[ -n "$line" ]]; do
		args=(${line//,/ })
		timeValue="${args[1]}"
		indexLine=$((indexLine+1))
		if [ "$indexLine" -eq 1 ]; then
			break;
		fi
	done < "$timeFile"
}

#analyse: For a given mode, retrieve time for all iterations and save it in a csv file
#
# Arguments:
# 	- $1: The mode of execution: supervised or unsupervised
#		If the value is other than one of the above, it will be considered as unsupervised
#
# Output:
#	- A csv file (resultsFile) where:
#		First line is mode; run1; run2; ...; average
#               Second line givenmode; result run1; result run2; ...; result average
#		...
#
# Pseudo-code:
#	create a variable having the csv line
#	for each iteration
#		retrieve the time result
#		concatenate csv line
#	Compute average
#	Write csv line in csv file
analyse () {
	mode="$1"
	echo "-----mode $mode-----"
	csvLine="$mode"
	average=0
	for indexRun in $(seq $numberOfRun); do
		retriveTime "$outputDirectory/time.$mode.$architecture.$indexRun"
		csvLine="$csvLine$csvDelimiter$timeValue"
		average=$(echo "$average + $timeValue"|bc)
	done
	average=$(echo "$average/$numberOfRun"|bc -l)
	csvLine="$csvLine$csvDelimiter$average"
	echo $csvLine >> $resultsFile
}

#Main program

#Environment preparation
echo "Prepare environment"
mkdir -p $outputDirectory
cp -r ../Morphologies $workingDirectory
rm -f $resultsFile
#Prepare the csv file
csvLine="mode"
for indexRun in $(seq $numberOfRun); do
	csvLine="$csvLine$csvDelimiter Run$indexRun"
done
csvLine="$csvLine$csvDelimiter Average"
	echo $csvLine >> $resultsFile

echo "Launch run"
run "supervised"
run "unsupervised"

echo "Analyse"
analyse "supervised"
analyse "unsupervised"
